//Q1
package multithreadingAssignment;

class Threadex11 extends Thread{
	public void run() {
	for(int i=0;i<=10;i++) {
		System.out.println("i am a parent thread class");
	}
}
}
public class Threadex1 {
public static void main(String[] args) {
	  
	Threadex11 th=new Threadex11();
	th.start();
	
	for(int i=0;i<=10;i++) {
		System.out.println("i am a child thread class");
	}
}
}



//Q2

package multithreadingAssignment;

class Runnableex1 implements Runnable{
	public void run() {
	for(int i=0;i<=10;i++) {
		System.out.println("i am a parent thread class");
	}
}
}
public class Threadex1 {
public static void main(String[] args) {
	 
	Runnableex1 rn=new Runnableex1();
	Thread th=new Thread(rn);
	th.start();
	
	for(int i=0;i<=10;i++) {
		System.out.println("i am a child thread class");
	}
}
}




//Q3
package multithreadingAssignment;
class GetThread extends Thread{
	public void run() {
		System.out.println("Thread Name: " + Thread.currentThread().getName());
		   for (int i = 1; i <= 5; i++) {
	            System.out.println(getName() + ": " + i);
	             
	        }
	}
}
public class Threadex3 {
public static void main(String[] args) {
	GetThread gt = new GetThread();
	gt.setName("rahul");
	gt.start();
 
	System.out.println("Main Thread Name: " + Thread.currentThread().getName());
	  for (int i = 1; i <= 5; i++) {
          System.out.println(Thread.currentThread().getName() + ": " + i);
     
      }
	
}
}



//Q4

package multithreadingAssignment;
class GetThread extends Thread{
	public void run() {
		 
		System.out.println("Thread Priority: " + this.getPriority());
		  
	}
}
public class Threadex3 {
public static void main(String[] args) {
	GetThread gt = new GetThread();
	gt.setPriority(Thread.MAX_PRIORITY);
	gt.start();
	System.out.println("Main thread's priority: " + Thread.currentThread().getPriority());	 
	
}
}


//Q5

package multithreadingAssignment;

class Threadex11 extends Thread{
	 public void run() {
		 {
		        System.out.println("Started " + Thread.currentThread());
		         
		        Thread.yield();
		        System.out.println("Ended " + Thread.currentThread());
		    }
	    }
}
public class Threadex1 {
public static void main(String[] args)   {
	  
	Threadex11 y1 = new Threadex11();
    Thread t1 = new Thread(y1, "First child thread");
    
    Threadex11 y2 = new Threadex11();
    Thread t2 = new Thread(y1, "Second child thread");
    
    t1.start();
    t2.start();
	}
}


//Q6

package com.multi;

public class Joindemo extends Thread {
	public void run() {
		for(int i=0;i<=10;i++) {
			System.out.println("i am child thread");	 
			try {
				Thread.sleep(3000);  //sleep method is the gap between each execution
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		 
		}
	}
public static void main(String[] args) throws InterruptedException {
	Joindemo jd=new Joindemo();
	jd.start(); 
	jd.join(10000); //join method one thread is waited until the another thread completes its execution
	for(int i=0;i<=10;i++) {
		System.out.println("i am main thread");	 
	 
	}
}
}

//Q7

package com.multi;

public class Sleepdemo extends Thread {
	public void run() {
		for(int i=0;i<=10;i++) {
			System.out.println("slide show: "+i);
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
public static void main(String[] args) {
	Sleepdemo sd=new Sleepdemo();
	sd.start();
	 
}
}

//Q8

package multithreadingAssignment;
class Account{
	 private int balance;
	 public Account(int initialBalance) {
	        this.balance = initialBalance;
	    }
	 public synchronized void withdraw(int amount) {
	        if (amount > balance) {
	            System.out.println(Thread.currentThread().getName() + " tried to withdraw " + amount + " but insufficient funds.");
	        } else {
	            balance -= amount;
	            System.out.println(Thread.currentThread().getName() + " withdrew " + amount + ". New balance: " + balance);
	        }
	    }
	 
	 public synchronized void deposit(int amount) {
	        balance += amount;
	        System.out.println(Thread.currentThread().getName() + " deposited " + amount + ". New balance: " + balance);
	    }

	   
	    public synchronized int enquiry() {
	        return balance;
	    }
	    public synchronized void add(int amount) {
	        balance += amount;
	        System.out.println(Thread.currentThread().getName() + " added " + amount + ". New balance: " + balance);
	    }
}
public class Multithredingex8 {
public static void main(String[] args) throws InterruptedException {
	Account account = new Account(1000);
    Thread t1 = new Thread(() -> {
        account.withdraw(500);
        account.deposit(300);
        System.out.println(Thread.currentThread().getName() + " balance enquiry: " + account.enquiry());
    }, "Thread-1");
    Thread t2 = new Thread(() -> {
        account.withdraw(700);
        account.add(200);
        System.out.println(Thread.currentThread().getName() + " balance enquiry: " + account.enquiry());
    }, "Thread-2");
    t1.start();
    t2.start();
    
    t1.join();
    t2.join();
    
    System.out.println("Final balance in the main thread: " + account.enquiry());
}
}


//Q9

